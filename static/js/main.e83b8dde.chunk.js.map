{"version":3,"sources":["images/favicon.png","components/Cities.js","components/CountryList.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Cities","cities","Row","className","map","city","index","key","name","Math","round","main","temp","CountryList","useState","setCities","countryData","lat","lon","a","axios","post","res","citiesData","data","list","Col","md","country","onClick","e","preventDefault","fetchCityWeather","xs","Header","sm","src","Logo","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,qC,uPCK5B,SAASC,EAAT,GAA6B,IAAXC,EAAU,EAAVA,OAC/B,OACE,kBAACC,EAAA,EAAD,CAAKC,UAAU,2CACZF,GACCA,EAAOG,KAAI,SAACC,EAAMC,GAAP,OACT,yBACEH,UAAU,kEACVI,IAAKD,GAEL,wBAAIH,UAAU,OAAOE,EAAKG,MAC1B,yBAAKL,UAAU,aACb,uBAAGA,UAAU,YAAb,wBACA,0BAAMA,UAAU,iDACbM,KAAKC,MAAML,EAAKM,KAAKC,OAEvBH,KAAKC,MAAML,EAAKM,KAAKC,MAAQ,IAAM,kBAAC,IAAD,CAAOT,UAAU,YACpDM,KAAKC,MAAML,EAAKM,KAAKC,MAAQ,IAC5B,kBAAC,IAAD,CAAgBT,UAAU,mB,YCjB3B,SAASU,IAAe,IAAD,EACRC,mBAAS,MADD,mBAC7Bb,EAD6B,KACrBc,EADqB,KAE9BC,EAAc,CAClB,CACEC,KAAM,GACNC,KAAM,GACNV,KAAM,aAGR,CACES,IAAK,IACLC,KAAM,KACNV,KAAM,UAGR,CACES,IAAK,KACLC,IAAK,KACLV,KAAM,WAGR,CACES,IAAK,MACLC,KAAM,MACNV,KAAM,SAGR,CACES,IAAK,GACLC,KAAM,EACNV,KAAM,UA9B0B,4CAiCpC,WAAgCU,EAAKD,GAArC,iBAAAE,EAAA,sEACoBC,IAAMC,KAAN,2DACoCJ,EADpC,gBAC+CC,EAD/C,gEADpB,OACQI,EADR,OAKQC,EAAaD,EAAIE,KAAKC,KAC5BV,EAAUQ,GANZ,4CAjCoC,sBA0CpC,OACE,kBAACrB,EAAA,EAAD,CAAKC,UAAU,kCACb,kBAACuB,EAAA,EAAD,CAAKC,GAAG,KACN,yBAAKxB,UAAU,8EACZa,GACCA,EAAYZ,KAAI,SAACwB,EAAStB,GAAV,OACd,0BACEC,IAAKD,EACLH,UAAU,2CACV0B,QAAS,SAACC,GACRA,EAAEC,iBApDkB,sCAqDpBC,CAAiBJ,EAAQV,IAAKU,EAAQX,OAGvCW,EAAQpB,WAOnB,kBAACkB,EAAA,EAAD,CAAKO,GAAG,MACN,kBAACjC,EAAD,CAAQC,OAAQA,M,qBCjET,SAASiC,IACtB,OACE,kBAAChC,EAAA,EAAD,CAAKC,UAAU,0BACb,kBAACuB,EAAA,EAAD,CAAKC,GAAI,EAAGQ,GAAI,EAAGF,GAAI,GACrB,yBAAKG,IAAKC,IAAMC,IAAI,OAAOnC,UAAU,iBCO9BoC,MATf,WACE,OACE,yBAAKpC,UAAU,eACb,kBAAC+B,EAAD,MACA,kBAACrB,EAAD,QCEc2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e83b8dde.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/favicon.b5d5d120.png\";","import React from \"react\";\nimport { Row } from \"reactstrap\";\nimport { FiSun } from \"react-icons/fi\";\nimport { FaRegSnowflake } from \"react-icons/fa\";\n\nexport default function Cities({ cities }) {\n  return (\n    <Row className=\"d-flex justify-content-center flex-wrap\">\n      {cities &&\n        cities.map((city, index) => (\n          <div\n            className=\"eachCity m-3 p-3 allCenter flex-column  justify-content-between\"\n            key={index}\n          >\n            <h4 className=\"m-0\">{city.name}</h4>\n            <div className=\"allCenter\">\n              <p className=\"m-0 mr-1\">Current Temperature:</p>\n              <span className=\"cityTemperature allCenter rounded-circle mr-1\">\n                {Math.round(city.main.temp)}\n              </span>\n              {Math.round(city.main.temp) > 20 && <FiSun className=\"hotIcon\" />}\n              {Math.round(city.main.temp) < 20 && (\n                <FaRegSnowflake className=\"coldIcon\" />\n              )}\n            </div>\n          </div>\n        ))}\n    </Row>\n  );\n}\n","import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport Cities from \"./Cities\";\nimport { Row, Col } from \"reactstrap\";\n\nexport default function CountryList() {\n  const [cities, setCities] = useState(null);\n  const countryData = [\n    {\n      lat: -34,\n      lon: -64,\n      name: \"Argentina\",\n    },\n\n    {\n      lat: 5.2,\n      lon: -3.74,\n      name: \"France\",\n    },\n\n    {\n      lat: 51.5,\n      lon: 10.5,\n      name: \"Germany\",\n    },\n\n    {\n      lat: 32.18,\n      lon: -96.88,\n      name: \"Italy\",\n    },\n\n    {\n      lat: 40,\n      lon: -4,\n      name: \"Spain\",\n    },\n  ];\n  async function fetchCityWeather(lon, lat) {\n    const res = await axios.post(\n      `https://api.openweathermap.org/data/2.5/find?lat=${lat}&lon=${lon}&cnt=30&appid=9a6f2e544e3a8ce2e1271032a1ec02f8&units=metric`\n    );\n\n    const citiesData = res.data.list;\n    setCities(citiesData);\n  }\n\n  return (\n    <Row className=\"allCenter align-items-md-start\">\n      <Col md=\"2\">\n        <div className=\"countryList allCenter flex-md-column flex-sm-row flex-column mx-md-0 fixed\">\n          {countryData &&\n            countryData.map((country, index) => (\n              <span\n                key={index}\n                className=\"eachCountry my-3 mx-md-0 mx-4 text-white\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  fetchCityWeather(country.lon, country.lat);\n                }}\n              >\n                {country.name}\n              </span>\n            ))}\n        </div>\n      </Col>\n\n      {/* Render Each City */}\n      <Col xs=\"10\">\n        <Cities cities={cities} />\n      </Col>\n    </Row>\n  );\n}\n","import React from \"react\";\nimport Logo from \"../images/favicon.png\";\nimport { Row, Col } from \"reactstrap\";\n\nexport default function Header() {\n  return (\n    <Row className=\"header py-4 px-3 fixed\">\n      <Col md={1} sm={2} xs={3}>\n        <img src={Logo} alt=\"Logo\" className=\"headerLogo\" />\n      </Col>\n    </Row>\n  );\n}\n","import React from \"react\";\nimport \"./global.scss\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport CountryList from \"./components/CountryList\";\nimport Header from \"./components/Header\";\n\nfunction App() {\n  return (\n    <div className=\"text-center\">\n      <Header />\n      <CountryList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}